
from aiogram import F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core import database, api
from core.config import dp
from core.states import FilterStates
from core.variables import course_filters_names, course_difficulty_names


@dp.callback_query(F.data == 'search_course')
async def search_course(call: types.CallbackQuery, state: FSMContext):
    user = await database.get_user(call.message.chat.id)
    state_data = await state.get_data()

    index, courses, page = state_data.get('index', 0), state_data.get('courses', []), state_data.get('page', 0)
    if index >= len(courses):
        page += 1
        courses += api.stepik_get_courses(user['course_filters'], page)

    if index >= len(courses):
        return await call.answer('–ë–æ–ª—å—à–µ –∫—É—Ä—Å–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ—Ç')
    await state.update_data(page=page, courses=courses, index=index+1)
    course = courses[index]

    keyboard = InlineKeyboardBuilder()
    keyboard.row(types.InlineKeyboardButton(text='‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ', url=course['canonical_url']))
    keyboard.row(types.InlineKeyboardButton(text=f'‚û°Ô∏è –î–∞–ª–µ–µ', callback_data='search_course'))
    keyboard.row(types.InlineKeyboardButton(text='üèö –ù–∞–∑–∞–¥', callback_data='start'))

    text = (f'<b>{course["title"]}</b>\n\n'
            f'–¶–µ–Ω–∞: {course.get("price", "") + " ‚ÇΩ" if course["is_paid"] else "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π"}\n'
            f'–°–ª–æ–∂–Ω–æ—Å—Ç—å: {course_difficulty_names[course["difficulty"]]}\n'
            f'–Ø–∑—ã–∫: {"üá∑üá∫ –†—É—Å—Å–∫–∏–π" if course["language"] == "ru" else "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π"}\n'
            f'–£—á–∞—â–∏—Ö—Å—è: {course["learners_count"]} —á–µ–ª–æ–≤–µ–∫\n'
            f'{"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ‚úÖ –ï—Å—Ç—å" if course.get("certificate") else ""}\n')

    await call.answer()
    if course['cover']:
        await call.message.answer_photo(course['cover'], caption=text, reply_markup=keyboard.as_markup())
    else:
        await call.message.answer(text, reply_markup=keyboard.as_markup(), disable_web_page_preview=True)


@dp.callback_query(F.data == 'course_filters')
async def courses_filter(data):
    message: types.Message = data.message if isinstance(data, types.CallbackQuery) else data
    user = await database.get_user(message.chat.id)

    keyboard = InlineKeyboardBuilder()
    for key, name in course_filters_names.items():
        if key in ['price__gte', 'price__lte']:
            continue
        key, name = ('price', '–¶–µ–Ω–∞') if key == 'is_paid' else (key, name)
        if key == 'with_certificate':
            name = 'üî≥ ' + name if user['course_filters'].get(key, False) else '‚¨úÔ∏è ' + name
        keyboard.add(types.InlineKeyboardButton(text=name, callback_data=f'course_filter_{key}'))
    keyboard.adjust(2, 2, 2)
    keyboard.row(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start'))

    text = f'üîé <b>–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤</b>\n'
    for key, value in user['course_filters'].items():
        if key == 'difficulty':
            value = course_difficulty_names[value]
        if key == 'is_paid' and not value:
            text += '\n–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å'
            continue
        if key == 'with_certificate':
            continue
        text += f'\n{course_filters_names[key]}: {value}'
    try:
        await message.edit_text(text, reply_markup=keyboard.as_markup())
    except:
        await message.answer(text, reply_markup=keyboard.as_markup())


@dp.callback_query(F.data == 'course_filter_interests')
async def filter_interests(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(education=call.data.split('_')[1])
    await state.set_state(FilterStates.interests)

    keyboard = InlineKeyboardBuilder()
    keyboard.row(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='course_filters'))
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –æ–±–ª–∞—Å—Ç–∏ –∑–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n\n'
                                 '–ù–∞–ø—Ä–∏–º–µ—Ä: <code>Python</code>, <code>ML</code>, <code>–¥–∏–∑–∞–π–Ω</code>',
                                 reply_markup=keyboard.as_markup())


@dp.message(F.text[0] != '/', FilterStates.interests)
async def filter_interests_save(message: types.Message, state: FSMContext):
    user = await database.get_user(message.chat.id)
    user['course_filters']['interests'] = message.text
    await database.update_user(message.chat.id, {'course_filters': user['course_filters']})
    await state.clear()
    await courses_filter(message)


@dp.callback_query(F.data == 'course_filter_price')
async def filter_salary(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(FilterStates.price)
    await state.update_data(choice='is_paid')

    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(text='–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π', callback_data='free_course'))
    keyboard.add(types.InlineKeyboardButton(text='–ù–µ –≤–∞–∂–Ω–æ', callback_data='course_no_matter'))
    keyboard.adjust(2)
    keyboard.row(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='course_filters'))
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫—É—Ä—Å–∞ –≤ —Ä—É–±–ª—è—Ö\n\n'
                                 '–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1000-5500</code>', reply_markup=keyboard.as_markup())


@dp.message(F.text[0] != '/', FilterStates.price)
async def filter_salary_save(message: types.Message, state: FSMContext):
    user = await database.get_user(message.chat.id)
    user['course_filters']['price__gte'], user['course_filters']['price__lte'] = message.text.split('-')
    if 'is_paid' in user['course_filters']:
        user['course_filters'].pop('is_paid')
    await database.update_user(message.chat.id, {'course_filters': user['course_filters']})
    await state.clear()
    await courses_filter(message)


@dp.callback_query(F.data == 'free_course', FilterStates.price)
async def free_course_save(call: types.CallbackQuery, state: FSMContext):
    user = await database.get_user(call.message.chat.id)
    user['course_filters']['is_paid'] = False
    if 'price__gte' in user['course_filters'] and 'price__lte' in user['course_filters']:
        user['course_filters'].pop('price__gte')
        user['course_filters'].pop('price__lte')
    await database.update_user(call.message.chat.id, {'course_filters': user['course_filters']})
    await state.clear()
    await courses_filter(call)


@dp.callback_query(F.data == 'course_filter_difficulty')
async def filter_difficulty(call: types.CallbackQuery, state: FSMContext):
    user = await database.get_user(call.message.chat.id)

    keyboard = InlineKeyboardBuilder()
    for dif, name in course_difficulty_names.items():
        name = '‚úÖ ' + name if user['course_filters'].get('difficulty') == dif else name
        keyboard.add(types.InlineKeyboardButton(text=name, callback_data='difficulty_' + dif))
    keyboard.add(types.InlineKeyboardButton(text='–ù–µ –≤–∞–∂–Ω–æ', callback_data='course_no_matter'))
    keyboard.adjust(2)
    keyboard.row(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='course_filters'))

    await state.set_state(FilterStates.difficulty)
    await state.update_data(message_id=call.message.message_id, choice='difficulty')
    await call.message.edit_text('–í—ã–±–µ—Ä–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞', reply_markup=keyboard.as_markup())


@dp.callback_query(F.data.startswith('difficulty_'))
async def filter_difficulty_save(call: types.CallbackQuery, state: FSMContext):
    user = await database.get_user(call.message.chat.id)
    user['course_filters']['difficulty'] = call.data.split('_')[1]
    await database.update_user(call.message.chat.id, {'course_filters': user['course_filters']})
    await courses_filter(call)


@dp.callback_query(F.data == 'course_no_matter')
async def filter_choice_no_matter_save(call: types.CallbackQuery, state: FSMContext):
    choice = (await state.get_data()).get('choice')
    user = await database.get_user(call.message.chat.id)

    if choice == 'is_paid' and 'price__gte' in user['course_filters'] and 'price__lte' in user['course_filters']:
        user['course_filters'].pop('price__gte')
        user['course_filters'].pop('price__lte')

    if choice in user['course_filters']:
        user['course_filters'].pop(choice)
    await database.update_user(call.message.chat.id, {'course_filters': user['course_filters']})
    await courses_filter(call)


@dp.callback_query(F.data == 'course_filter_with_certificate')
async def filter_change_with_certificate(call: types.CallbackQuery):
    user = await database.get_user(call.message.chat.id)
    user['course_filters']['with_certificate'] = not user['course_filters'].get('with_certificate', False)

    await database.update_user(call.message.chat.id, {'course_filters': user['course_filters']})
    await courses_filter(call)


@dp.callback_query(F.data == 'course_filter_lang')
async def filter_change_language(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(choice='lang')

    keyboard = InlineKeyboardBuilder()
    keyboard.add(types.InlineKeyboardButton(text='üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data='ru_language'))
    keyboard.add(types.InlineKeyboardButton(text='üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π', callback_data='en_language'))
    keyboard.add(types.InlineKeyboardButton(text='–ù–µ –≤–∞–∂–Ω–æ', callback_data='course_no_matter'))
    keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='course_filters'))
    keyboard.adjust(2, 2)

    await call.message.edit_text('–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∫—É—Ä—Å–∞', reply_markup=keyboard.as_markup())


@dp.callback_query(F.data.in_(['ru_language', 'en_language']))
async def filter_change_language_save(call: types.CallbackQuery):
    user = await database.get_user(call.message.chat.id)
    user['course_filters']['lang'] = call.data.split('_')[0]

    await database.update_user(call.message.chat.id, {'course_filters': user['course_filters']})
    await courses_filter(call)
