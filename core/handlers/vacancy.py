from aiogram import F, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core import api, database
from core.config import dp, bot
from core.states import FilterStates
from core.utils import get_salary
from core.variables import choose_vacancy_filters, vacancy_filters_names


@dp.callback_query(F.data == 'search_vacancy')
async def search_vacancy(call: types.CallbackQuery, state: FSMContext):
    page = (await state.get_data()).get('page', -1) + 1
    user = await database.get_user(call.message.chat.id)
    vacancies = api.hh_get_vacancies(user['vacancy_filters'], page)

    if not vacancies:
        return await call.answer('–ë–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ—Ç')
    vacancy = vacancies[0]

    await state.update_data(page=page)

    keyboard = InlineKeyboardBuilder()
    keyboard.row(types.InlineKeyboardButton(text='‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ', url=vacancy['alternate_url']))
    keyboard.row(types.InlineKeyboardButton(text=f'‚û°Ô∏è –î–∞–ª–µ–µ', callback_data='search_vacancy'))
    keyboard.row(types.InlineKeyboardButton(text='üèö –ù–∞–∑–∞–¥', callback_data='start'))

    text = (f'<b>{vacancy["name"]}</b>\n\n'
            f'–ö–æ–º–ø–∞–Ω–∏—è: <a href="{vacancy["employer"]["alternate_url"]}">{vacancy["employer"]["name"]}</a>\n'
            f'–ì–æ—Ä–æ–¥: {vacancy["area"]["name"]}\n'
            f'–ó–∞—Ä–ø–ª–∞—Ç–∞: {get_salary(vacancy["salary"])}\n'
            f'–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {vacancy["experience"]["name"]}\n'
            f'–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {vacancy["schedule"]["name"]}\n'
            f'–ó–∞–Ω—è—Ç–æ—Å—Ç—å: {vacancy["employment"]["name"]}\n')

    await call.answer()
    if vacancy['employer']['logo_urls']:
        await call.message.answer_photo(vacancy['employer']['logo_urls']['240'],
                                        caption=text, reply_markup=keyboard.as_markup())
    else:
        await call.message.answer(text, reply_markup=keyboard.as_markup(), disable_web_page_preview=True)


@dp.callback_query(F.data == 'vacancy_filters')
async def vacancy_filters(data):
    message: types.Message = data.message if isinstance(data, types.CallbackQuery) else data

    keyboard = InlineKeyboardBuilder()
    for key, name in vacancy_filters_names.items():
        keyboard.add(types.InlineKeyboardButton(text=name, callback_data=f'filter_{key}'))
    keyboard.adjust(2, 2, 2)
    keyboard.row(types.InlineKeyboardButton(text='üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ', callback_data='reset_vacancy_filters'),
                 types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='start'))

    user = await database.get_user(message.chat.id)
    text = f'üîé <b>–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π</b>\n'
    for key, value in user['vacancy_filters'].items():
        if key == 'city':
            value = value['name']
        elif key in choose_vacancy_filters:
            value = next((e for e in choose_vacancy_filters[key] if e['id'] == value))['name']
        text += f'\n{vacancy_filters_names[key]}: {value}'
    try:
        await message.edit_text(text, reply_markup=keyboard.as_markup())
    except:
        await message.answer(text, reply_markup=keyboard.as_markup())


@dp.callback_query(F.data == 'filter_knowledge')
async def filter_interests(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(education=call.data.split('_')[1])
    await state.set_state(FilterStates.knowledge)

    keyboard = InlineKeyboardBuilder()
    keyboard.row(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='vacancy_filters'))
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –æ–±–ª–∞—Å—Ç–∏ –∑–Ω–∞–Ω–∏–π –ø—Ä–æ–±–µ–ª –∑–∞–ø—è—Ç—É—é\n\n'
                                 '–ù–∞–ø—Ä–∏–º–µ—Ä: <code>Python</code>, <code>ML</code>, <code>–¥–∏–∑–∞–π–Ω</code>',
                                 reply_markup=keyboard.as_markup())


@dp.message(F.text[0] != '/', FilterStates.knowledge)
async def filter_knowledge_save(message: types.Message, state: FSMContext):
    user = await database.get_user(message.chat.id)
    user['vacancy_filters']['knowledge'] = message.text
    await database.update_user(message.chat.id, {'vacancy_filters': user['vacancy_filters']})
    await state.clear()
    await vacancy_filters(message)


@dp.callback_query(F.data == 'filter_salary')
async def filter_salary(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(FilterStates.salary)
    await state.update_data(choice='salary')

    keyboard = InlineKeyboardBuilder()
    keyboard.row(types.InlineKeyboardButton(text='–ù–µ –≤–∞–∂–Ω–æ', callback_data='vacancy_no_matter'))
    keyboard.row(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='vacancy_filters'))
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∑–∞—Ä–ø–ª–∞—Ç—É –≤ —Ä—É–±–ª—è—Ö\n\n'
                                 '–ù–∞–ø—Ä–∏–º–µ—Ä: <code>110000</code>', reply_markup=keyboard.as_markup())


@dp.message(F.text[0] != '/', FilterStates.salary)
async def filter_salary_save(message: types.Message, state: FSMContext):
    user = await database.get_user(message.chat.id)
    user['vacancy_filters']['salary'] = int(message.text)
    await database.update_user(message.chat.id, {'vacancy_filters': user['vacancy_filters']})
    await state.clear()
    await vacancy_filters(message)


@dp.callback_query(F.data == 'filter_city')
async def filter_city(call: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardBuilder()
    keyboard.row(types.InlineKeyboardButton(text='–ù–µ –≤–∞–∂–Ω–æ', callback_data='vacancy_no_matter'))
    keyboard.row(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='vacancy_filters'))

    await state.set_state(FilterStates.city)
    await state.update_data(message_id=call.message.message_id, choice='city')
    await call.message.edit_text('–í–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥', reply_markup=keyboard.as_markup())


@dp.message(F.text[0] != '/', FilterStates.city)
async def filter_city_choose(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    await message.delete()
    await state.clear()
    cities = api.hh_get_city(message.text)[:10]
    await state.update_data(cities={str(city['id']): city['name'] for city in cities})
    keyboard = InlineKeyboardBuilder()
    for city in cities:
        keyboard.add(types.InlineKeyboardButton(text=city['name'], callback_data='city_' + city['id']))
    keyboard.adjust(2)
    keyboard.row(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='filter_city'))

    await bot.edit_message_text('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞', chat_id=message.chat.id,
                                message_id=state_data.get('message_id'), reply_markup=keyboard.as_markup())


@dp.callback_query(F.data.startswith('city_'))
async def filter_city_save(call: types.CallbackQuery, state: FSMContext):
    city = {'id': call.data.split('_')[1], 'name': (await state.get_data()).get('cities')[call.data.split('_')[1]]}
    user = await database.get_user(call.message.chat.id)
    user['vacancy_filters']['city'] = city
    await database.update_user(call.message.chat.id, {'vacancy_filters': user['vacancy_filters']})
    await vacancy_filters(call)


@dp.callback_query(F.data.in_(['filter_experience', 'filter_schedule', 'filter_employment']))
async def filter_choice(call: types.CallbackQuery, state: FSMContext):
    choice = call.data.split('_')[1]
    await state.update_data(choice=choice)
    name = {'experience': '—Å–≤–æ–π –æ–ø—ã—Ç', 'schedule': '—É–¥–æ–±–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫', 'employment': '–∑–∞–Ω—è—Ç–æ—Å—Ç—å'}[choice]
    keyboard = InlineKeyboardBuilder()
    for var in choose_vacancy_filters[choice]:
        keyboard.add(types.InlineKeyboardButton(text=var['name'], callback_data='choice_' + var['id']))
    keyboard.adjust(3)
    keyboard.row(types.InlineKeyboardButton(text='–ù–µ –≤–∞–∂–Ω–æ', callback_data='vacancy_no_matter'),
                 types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='vacancy_filters'))
    await call.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ {name}', reply_markup=keyboard.as_markup())


@dp.callback_query(F.data.startswith('choice_'))
async def filter_choice_save(call: types.CallbackQuery, state: FSMContext):
    choice = (await state.get_data()).get('choice')
    user = await database.get_user(call.message.chat.id)
    user['vacancy_filters'][choice] = call.data.split('_')[1]

    await database.update_user(call.message.chat.id, {'vacancy_filters': user['vacancy_filters']})
    await vacancy_filters(call)


@dp.callback_query(F.data == 'vacancy_no_matter')
async def filter_choice_no_matter_save(call: types.CallbackQuery, state: FSMContext):
    choice = (await state.get_data()).get('choice')
    user = await database.get_user(call.message.chat.id)
    if choice in user['vacancy_filters']:
        user['vacancy_filters'].pop(choice)
    await database.update_user(call.message.chat.id, {'vacancy_filters': user['vacancy_filters']})
    await vacancy_filters(call)


@dp.callback_query(F.data == 'reset_vacancy_filters')
async def reset_vacancy_filters(call: types.CallbackQuery):
    await database.update_user(call.message.chat.id, {'vacancy_filters': {}})
    await vacancy_filters(call)
